#pragma once

#include <vector>
#include <memory>
#include <random>
#include <cmath>

// -----------------------------------------------------------
// 1) Data & Settings
// -----------------------------------------------------------

// Each partial track across frames
struct Partial
{
    std::vector<float> times;
    std::vector<float> freqs;
    std::vector<float> amps;
    std::vector<float> phases;
    std::vector<float> envelope;
    float spatialPosition = 0.5f;
};

// Settings controlling which effects to enable, plus any effect parameters
struct AdditiveSettings
{
    // Booleans for the existing "factory" effects
    bool enableTimeStretch = true;
    bool enableRandomPan = true;
    bool enableLfoMod = true;

    // Example parameters
    float timeStretchFactor = 2.0f;
    float lfoRateHz = 0.5f;

    // -------------------------------------------------------
    // If you add a new effect, e.g. "PhaserEffect", you might do:
    //
    // bool enablePhaser = false;
    // float phaserDepth = 0.7f;
    //
    // Then in createEffectsChain() below, you add:
    //
    // if(settings.enablePhaser)
    //     chain.addEffect(std::make_unique<PhaserEffect>());
    // -------------------------------------------------------
};

// -----------------------------------------------------------
// 2) Base Interface
// -----------------------------------------------------------
struct IAdditiveEffect
{
    virtual ~IAdditiveEffect() {}
    virtual void processPartials(std::vector<Partial>& partials,
        float sampleRate,
        const AdditiveSettings& settings) = 0;
};

// -----------------------------------------------------------
// 3) Concrete Effects
// -----------------------------------------------------------

struct TimeStretchEffect : public IAdditiveEffect
{
    void processPartials(std::vector<Partial>& partials,
        float /*sampleRate*/,
        const AdditiveSettings& settings) override
    {
        for (auto& p : partials)
        {
            for (auto& t : p.times)
                t *= settings.timeStretchFactor;
        }
    }
};

struct RandomPanEffect : public IAdditiveEffect
{
    std::mt19937 rng;

    RandomPanEffect()
    {
        std::random_device rd;
        rng.seed(rd());
    }

    void processPartials(std::vector<Partial>& partials,
        float /*sampleRate*/,
        const AdditiveSettings& /*settings*/) override
    {
        std::uniform_real_distribution<float> dist(0.0f, 1.0f);
        for (auto& p : partials)
        {
            p.spatialPosition = dist(rng);
            // Optionally reset envelope if desired
            p.envelope.assign(p.times.size(), 1.0f);
        }
    }
};

struct LfoModEffect : public IAdditiveEffect
{
    void processPartials(std::vector<Partial>& partials,
        float sampleRate,
        const AdditiveSettings& settings) override
    {
        float twoPi = 6.283185307f;
        float rate = settings.lfoRateHz;

        for (auto& p : partials)
        {
            p.envelope.resize(p.times.size(), 1.0f);
            for (size_t i = 0; i < p.times.size(); ++i)
            {
                float t = p.times[i] / sampleRate;
                p.envelope[i] = 1.0f + 0.2f * std::sin(twoPi * rate * t);
            }
        }
    }
};

// -----------------------------------------------------------
// 4) Effects Chain & Factory
// -----------------------------------------------------------

class AdditiveEffectsChain
{
public:
    void addEffect(std::unique_ptr<IAdditiveEffect> effect)
    {
        effects.push_back(std::move(effect));
    }

    void processPartials(std::vector<Partial>& partials,
        float sampleRate,
        const AdditiveSettings& settings)
    {
        for (auto& fx : effects)
            fx->processPartials(partials, sampleRate, settings);
    }

private:
    std::vector<std::unique_ptr<IAdditiveEffect>> effects;
};

// Single helper to build the chain from AdditiveSettings.
// You only need to modify this if you add a new effect class.
inline AdditiveEffectsChain createEffectsChain(const AdditiveSettings& settings)
{
    AdditiveEffectsChain chain;

    if (settings.enableTimeStretch)
        chain.addEffect(std::make_unique<TimeStretchEffect>());

    if (settings.enableRandomPan)
        chain.addEffect(std::make_unique<RandomPanEffect>());

    if (settings.enableLfoMod)
        chain.addEffect(std::make_unique<LfoModEffect>());

    // Example of adding more effects if you define them.
    // if(settings.enablePhaser)
    //     chain.addEffect(std::make_unique<PhaserEffect>());

    return chain;
}
